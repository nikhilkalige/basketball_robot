<?xml version="1.0"?>
<launch>

  <!-- choose whether or not to use simulation -->
  <arg name="use_sim" default="true"/>
  <!-- Choose whether velocity or position trajectory controller is used -->
  <arg name="position_controller" default="true" />
  <!-- Choose whether to start end effector velocity node -->
  <arg name="start_eff_velocity" default="true" />
  <!-- Controller config file -->
  <arg name="config_file" default="$(find manipulator_gazebo)/config/arm_control.yaml" />

  <!-- convert joint states to TF transforms for rviz, etc -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="50.0" />
    <param name="tf_prefix" type="string" value="" />
  </node>

  <group if="$(arg use_sim)">
    <!-- Fake Calibration -->
    <node pkg="rostopic" type="rostopic" name="fake_joint_calibration"
          args="pub /calibrated std_msgs/Bool true" />
  </group>

  <!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find bbbot_gazebo)/config/common_control.yaml" command="load" />

  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <rosparam param="source_list">[/leftarm/joint_states, /rightarm/joint_states]</rosparam>
  </node>

  <!-- Left arm controllers -->
  <group ns="leftarm">
    <rosparam file="$(find bbbot_gazebo)/config/common_control.yaml" command="load" />
    <rosparam file="$(find bbbot_gazebo)/config/leftarm_control.yaml" command="load" />

    <group if="$(arg use_sim)">
      <param name="robot_description"
        command="$(find xacro)/xacro.py '$(find bbbot_description)/urdf/bbbot.xacro'" />

      <!-- Load hardware interface -->
      <node name="manipulator_hardware_interface" pkg="manipulator_driver" type="manipulator_driver"
        output="screen" />
    </group>

    <!-- <group if="$(arg start_eff_velocity)">
      <node name="larm_velocity" pkg="manipulator_velocity" type="twist.py" output="screen" />
    </group> -->

    <node name="joint_state_controller_spawner" pkg="controller_manager" type="controller_manager"
      args="spawn joint_state_controller" respawn="false" output="screen" />

    <group if="$(arg position_controller)">
      <node name="larm_controller_spawner" pkg="controller_manager" type="controller_manager"
        args="spawn position_joint_trajectory_controller" respawn="false" output="screen" />
    </group>
    <group unless="$(arg position_controller)">
      <node name="larm_controller_spawner" pkg="controller_manager" type="controller_manager"
        args="spawn velocity_joint_trajectory_controller" respawn="false" output="screen" />
    </group>

  </group>

  <!-- Right arm controllers -->
  <group ns="rightarm">
    <rosparam file="$(find bbbot_gazebo)/config/common_control.yaml" command="load" />
    <rosparam file="$(find bbbot_gazebo)/config/rightarm_control.yaml" command="load" />

    <group if="$(arg use_sim)">
      <param name="robot_description"
        command="$(find xacro)/xacro.py '$(find bbbot_description)/urdf/bbbot.xacro'" />

      <!-- Load hardware interface -->
      <node name="manipulator_hardware_interface" pkg="manipulator_driver" type="manipulator_driver"
        output="screen" />
    </group>

    <node name="joint_state_controller_spawner" pkg="controller_manager" type="controller_manager"
     args="spawn joint_state_controller" respawn="false" output="screen" />

    <group if="$(arg position_controller)">
      <node name="rarm_controller_spawner" pkg="controller_manager" type="controller_manager"
        args="spawn position_joint_trajectory_controller" respawn="false" output="screen" />
    </group>
    <group unless="$(arg position_controller)">
      <node name="rarm_controller_spawner" pkg="controller_manager" type="controller_manager"
        args="spawn velocity_joint_trajectory_controller" respawn="false" output="screen" />
    </group>

  </group>
</launch>
